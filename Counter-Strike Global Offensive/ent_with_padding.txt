class C_BaseEntity : public IClientEntity
{
public:
	virtual const char* _GetClassName() = 0;
	virtual datamap_t* GetDataDescMap() = 0;
	virtual void __pad0() = 0;
	virtual const char* GetClassName() = 0;
	virtual datamap_t* GetPredDescMap() = 0;

public:
	string_t m_iClassname = { };
	VarMapping_t m_VarMap = { };
	HORIZON_PAD( 0x0028 );
	int index = -1;
	unsigned char m_nRenderFX = 0;
	unsigned char m_nRenderFXBlend = 0;
	unsigned short m_EntClientFlags = 0;
	color32 m_clrRender = { };
	const model_t* model = nullptr;
	float m_flAnimTime = 0.f;
	float m_flOldAnimTime = 0.f;
	float m_flSimulationTime = 0.f;
	float m_flOldSimulationTime = 0.f;
	int m_fEffects = 0;
	unsigned char m_nRenderMode = 0;
	unsigned char m_nOldRenderMode = 0;
	ClientRenderHandle_t m_hRender = INVALID_CLIENT_RENDER_HANDLE;
	bool m_bReadyToDraw = false;
	HORIZON_PAD( 0x0003 );
	int m_nNextThinkTick = -1;
	int m_nLastThinkTick = -1;
	short m_nModelIndex = -1;
	char m_takedamage = 0;
	char m_lifeState = 0;
	int m_iHealth = 0;
	float m_flSpeed = 0.f;
	int m_iTeamNum = 0;
	CPredictableId m_PredictableID = { };
	PredictionContext* m_pPredictionContext = nullptr;
	int touchStamp = 0;
	CBaseHandle m_RefEHandle = { };
	bool m_bEnabledInToolView = false;
	HORIZON_PAD( 0x0003 );
	bool m_bToolRecording = false;
	HORIZON_PAD( 0x0003 );
	HTOOLHANDLE m_ToolHandle = HTOOLHANDLE_INVALID;
	int m_nLastRecordedFrame = -1;
	IPhysicsObject* m_pPhysicsObject = nullptr;
	bool m_bPredictionEligible = false;
	HORIZON_PAD( 0x0003 );
	int m_nSimulationTick = -1;
	CUtlVector< thinkfunc_t > m_aThinkFunctions = { };
	int m_iCurrentThinkContext = -1;
	Vector m_vecViewOffset = { };
	Vector m_vecVelocity = { };
	Vector m_vecAbsVelocity = { };
	QAngle m_vecAngVelocity = { };
	bool m_bDormantPredictable = false;
	HORIZON_PAD( 0x0003 );
	int m_nIncomingPacketEntityBecameDormant = -1;
	float m_flSpawnTime = 0.f;
	float m_flLastMessageTime = 0.f;
	Vector m_vecBaseVelocity = { };
	float m_flGravity = 0.f;
	ModelInstanceHandle_t m_ModelInstance = MODEL_INSTANCE_INVALID;
	ClientShadowHandle_t m_ShadowHandle = CLIENTSHADOW_INVALID_HANDLE;
	float m_flProxyRandomValue = 0.f;
	ClientThinkHandle_t m_hThink = nullptr;
	int m_iEFlags = 0;
	MoveType_t m_MoveType = MOVETYPE_NONE;
	MoveCollide_t m_MoveCollide = MOVECOLLIDE_DEFAULT;
	unsigned char m_iParentAttachment = 0;
	unsigned char m_iOldParentAttachment = 0;
	unsigned char m_nWaterLevel = 0;
	unsigned char m_nWaterType = 0;
	bool m_bDormant = false;
	bool m_bPredictable = false;
	HORIZON_PAD( 0x0002 );
	CHandle< C_BaseEntity > m_pMoveParent = { };
	CHandle< C_BaseEntity > m_pMoveChild = { };
	CHandle< C_BaseEntity > m_pMovePeer = { };
	CHandle< C_BaseEntity > m_pMovePrevPeer = { };
	CHandle< C_BaseEntity > m_hNetworkMoveParent = { };
	CHandle< C_BaseEntity > m_hOldMoveParent = { };
	string_t m_ModelName = { };
	CCollisionProperty m_Collision = { };
	float m_flElasticity = 0.f;
	float m_flShadowCastDistance = 0.f;
	EHANDLE m_ShadowDirUseOtherEntity = { };
	EHANDLE m_hGroundEntity = { };
	float m_flGroundChangeTime = 0.f;
	float m_flFriction = 0.f;
	Vector m_vecAbsOrigin = { };
	QAngle m_angAbsRotation = { };
	Vector m_vecOldOrigin = { };
	QAngle m_vecOldAngRotation = { };
	Vector m_vecOrigin = { };
	CInterpolatedVar< Vector > m_iv_vecOrigin = { };
	QAngle m_angRotation = { };
	CInterpolatedVar< QAngle > m_iv_angRotation = { };
	matrix3x4_t m_rgflCoordinateFrame = { };
	Vector m_vecNetworkOrigin = { };
	QAngle m_angNetworkAngles = { };
	int m_fFlags = 0;
	int m_CollisionGroup = 0;
	byte* m_pIntermediateData[ MULTIPLAYER_BACKUP ] = { };
	byte* m_pOriginalData = nullptr;
	bool m_bIsPlayerSimulated = false;
	bool m_bSimulatedEveryTick = false;
	bool m_bAnimatedEveryTick = false;
	bool m_bAlternateSorting = false;
	unsigned char m_iTextureFrameIndex = 0;
	unsigned char m_fBBoxVisFlags = 0;
	HORIZON_PAD( 0x0002 );
	int m_DataChangeEventRef = 0;
	CHandle< C_BasePlayer > m_hPlayerSimulationOwner = { };
	EHANDLE m_hOwnerEntity = { };
	EHANDLE m_hEffectEntity = { };
	int m_fDataObjectTypes = 0;
	AimEntsListHandle_t m_AimEntsListHandle = INVALID_AIMENTS_LIST_HANDLE;
	float m_fRenderingClipPlane[ 4 ] = { };
	bool m_bEnableRenderingClipPlane = false;
	HORIZON_PAD( 0x0001 );
	unsigned short m_InterpolationListEntry = 0xFFFF;
	unsigned short m_TeleportListEntry = 0xFFFF;
};